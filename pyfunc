#!/usr/bin/env python

import argparse
import fileinput
import importlib
import sys
from collections import namedtuple
import __builtin__
import json

DEFAULT_ARGTYPE = 'str'

def import_package(pkg):
  """ Import python package """
  components = pkg.split('.')
  mod = importlib.import_module(components[0])
  for comp in components[1:]:
    mod = getattr(mod, comp)
  return mod

def _print_shell(output):
  """ Print output to be consumed by shell """
  output_type = str(type(output))
  if 'list' in output_type or 'set' in output_type:
    for val in output:
      print val
  elif 'dict' in output_type:
    for k, v in output.iteritems():
      print k + ': ' + str(v)
  else:
    print output

def _print_json(output):
  """ Print output as json """
  print json.dumps(output, indent=4)

def print_output(output, print_as):
  """ Print output returned by method call """
  if print_as == 'shell':
    _print_shell(output)
  elif print_as == 'json':
    _print_json(output)
  return

def call_method(meth, args):
  """ Call the method and return output """
  return meth(*args)

def update_args(parsed_args):
  """ Process and enrich the args """
  mod, meth, argtypes, args = None, None, [], []

  # get the target module and method
  if parsed_args.mod != 'stdlib':
    mod = import_package(parsed_args.mod)
    meth = getattr(mod, parsed_args.meth)
  else:
    meth = getattr(__builtin__, parsed_args.meth)
  parsed_args.mod, parsed_args.meth = mod, meth

  # check the argtypes and args
  argtypes_strs = parsed_args.argtypes.split(',')
  args = parsed_args.args

  # user did not specify any args
  if args is None:
    parsed_args.args = []
    return parsed_args

  # check if any of the args correspond to reading from stdin
  # if user did not specify an arg and stdin_args is on - read from stdin
  updated_args = []
  if len(args) == 0:
    if parsed_args.stdin_args:
      args.append('-')

  # read the args
  for arg in args:
    # check if we need to interpret '-' as read from stdin or not
    if arg == '-' and parsed_args.stdin_args:
      updated_args.append(''.join(fileinput.input(arg)).rstrip())
      continue
    updated_args.append(arg)

  parsed_args.args= updated_args

  # user specified one arg type for all args
  if len(argtypes_strs) == 1:
    argtypes_strs = [argtypes_strs[0]] * len(args)

  # get the actual python argtype
  argtypes = []
  for argtype_str in argtypes_strs:
    # do not apply for list as some preprocessing needs to be done for it
    if argtype_str.startswith('list'):
      argtype = argtype_str
    else:
      argtype = getattr(__builtin__, argtype_str.strip())
    argtypes.append(argtype)

  parsed_args.argtypes = argtypes

  # convert each arg into its specified argtype
  converted_args = []
  for arg, argtype in zip(parsed_args.args, parsed_args.argtypes):
    # handle case for list separately
    if str(argtype).startswith('list'):
      # if user intends the value of arg to be taken from stdin
      if arg == '-':
        arg = ''.join(fileinput.input(argval)).rstrip()

      # assume that each element of list is of default argtype, unless specified
      # otherwise
      each_argtype = getattr(__builtin__, DEFAULT_ARGTYPE)
      if ':' in argtype:
        each_argtype = getattr(__builtin__, argtype.split(':')[1].strip())

      converted_args.append([each_argtype(x) for x in arg.split()])
    else:
      converted_args.append(argtype(arg))

  parsed_args.args = converted_args

  return parsed_args

def parse_cmdline(args):
  """ Parse user input """
  desc = 'Call python methods from the cmdline'
  parser = argparse.ArgumentParser(description=desc)
  parser.add_argument('--mod', help='module to load', default='stdlib')
  parser.add_argument('--meth', help='module method to call', required=True)
  parser.add_argument('--argtypes',
                      help='method arg types builtin|list:builtin',
                      default=DEFAULT_ARGTYPE)
  parser.add_argument('--args', help='method args', nargs=argparse.REMAINDER,
                      default=None)
  parser.add_argument('--stdin_args', help='takes args from stdin?',
                      action='store_true', dest='stdin_args')
  parser.add_argument('--print_as',
                      help='Explicity print returned output',
                      default='shell')
  parser.set_defaults(stdin_args=True)
  parsed_args = parser.parse_args()
  return parsed_args

def main(args):
  """ Parse input, call method, return output """
  parsed_args = parse_cmdline(sys.argv)
  callerinfo = update_args(parsed_args)
  output = call_method(callerinfo.meth, callerinfo.args)
  if parsed_args.print_as != 'none':
    print_output(output, parsed_args.print_as)

if __name__ == '__main__':
  main(sys.argv)
